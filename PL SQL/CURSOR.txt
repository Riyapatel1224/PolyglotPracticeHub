-- DECLARE A CURSOR WHICH WILL DISPLAY SRNO. , LAST_NAME , JOB_ID , HIRE_DATE AND SALARY OF ALL EMPLOYEES.
-- DISPLAY RESULT WITH PROPER COLUMN HEADINGS AND LINES AS SEPARATOR.

DECLARE 
	V_LN EMPLOYEES.LAST_NAME%TYPE;
	V_JI EMPLOYEES.JOB_ID%TYPE;
	V_HD EMPLOYEES.HIRE_DATE%TYPE;
	V_SAL EMPLOYEES.SALARY%TYPE;

	CURSOR EMP_CURSOR IS
        SELECT LAST_NAME, JOB_ID, HIRE_DATE, SALARY FROM EMPLOYEES;
BEGIN 
	OPEN EMP_CURSOR;
	DBMS_OUTPUT.PUT_LINE(RPAD ('=',60, '='));
	DBMS_OUTPUT.PUT_LINE(LPAD('SRNO',4) || '   ' || RPAD('LAST_NAME',10) || '   ' || LPAD('SALARY',13) ||'   '|| RPAD('JOB_ID',10)||'   '||RPAD('HIRE_DATE',10));
	DBMS_OUTPUT.PUT_LINE(RPAD ('=',60, '='));
		LOOP
			FETCH EMP_CURSOR INTO V_LN, V_JI, V_HD, V_SAL ;
				EXIT WHEN EMP_CURSOR%NOTFOUND;
					DBMS_OUTPUT.PUT_LINE(LPAD(EMP_CURSOR%ROWCOUNT,4) || '   ' || RPAD(INITCAP(V_LN),10) ||'   '|| LPAD(V_SAL,13) ||'   '||  RPAD(V_JI,10)||'   '||RPAD(V_HD,10));
		END LOOP;
	DBMS_OUTPUT.PUT_LINE(RPAD ('=',60, '='));
	CLOSE EMP_CURSOR;
END;
/


-- DECLARE A CURSOR WHICH WILL DISPLAY SRNO. , DEPARTMENT_NAME , CITY , COUNTRY_NAME.
-- DISPLAY RESULT WITH PROPER COLUMN HEADINGS AND LINES AS SEPARATOR.
-- EDLCR
DECLARE 
	V_DN DEPARTMENTS.DEPARTMENT_NAME%TYPE;
	V_CITY LOCATIONS.CITY%TYPE;
	V_COUNTRYNAME COUNTRIES.COUNTRY_NAME%TYPE;

	CURSOR EMP_CURSOR IS 
		SELECT DEPARTMENT_NAME, CITY, COUNTRY_NAME FROM DEPARTMENTS
        INNER JOIN LOCATIONS USING(LOCATION_ID) 
		INNER JOIN COUNTRIES USING(COUNTRY_ID);

BEGIN 
		OPEN EMP_CURSOR;
		DBMS_OUTPUT.PUT_LINE(RPAD('=',60,'='));
		DBMS_OUTPUT.PUT_LINE(LPAD('SRNO',4)||'   '|| RPAD('DEPARTMENT_NAME',10) ||'   '|| RPAD('CITY',20)||'   '|| RPAD('COUNTRY_NAME',12));
		DBMS_OUTPUT.PUT_LINE(RPAD('=',60,'='));

			LOOP
				FETCH EMP_CURSOR INTO V_DN , V_CITY, V_COUNTRYNAME;
					EXIT WHEN EMP_CURSOR%NOTFOUND;
						DBMS_OUTPUT.PUT_LINE(LPAD(EMP_CURSOR%ROWCOUNT,4)||'   '|| RPAD(V_DN,10) ||'   '|| RPAD(V_CITY,20)||'   '|| RPAD(V_COUNTRYNAME,12));
			END LOOP;
		DBMS_OUTPUT.PUT_LINE(RPAD('=',60,'='));
	CLOSE EMP_CURSOR;
END;
/




-- DECLARE A CURSOR WHICH WILL HOLD DATA OF EMPLOYEES WHO WORKS IN DEPARMENT 90
-- IT SHOULD HOLD FIRST_NAME , JOB_ID, HIRE_DATE, SALARY VALUES.
-- IT SHOULD DISPLAY FIRST_NAME, JOB_ID, HIRE_DATE, SALARY, YEARLY_SALARY AT THE END IT SHOULD ALSO DISPLAY SUM OF SALARY COLUMN AND SUM OF YEARLY_ SALARY -- COLUMN.
-- (DON'T USE SUMMARY FUNCTION)


-- DECLARE A CURSOR WHICH WILL HOLD DATA OF EMPLOYEES WHO WORKS IN DEPARMENT 90
-- IT SHOULD HOLD FIRST_NAME , JOB_ID, HIRE_DATE, SALARY VALUES.
-- IT SHOULD DISPLAY FIRST_NAME, JOB_ID, HIRE_DATE, SALARY, YEARLY_SALARY AT THE END 
-- IT SHOULD ALSO DISPLAY SUM OF SALARY COLUMN AND SUM OF YEARLY_ SALARY COLUMN.
-- (DON'T USE SUMMARY FUNCTION)


DECLARE 
	V_FN EMPLOYEES.FIRST_NAME%TYPE;
	V_JI EMPLOYEES.JOB_ID%TYPE;
	V_HD EMPLOYEES.HIRE_DATE%TYPE;
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_TOTALYSAL NUMBER := 0;
	V_TOTALSAL NUMBER := 0;

	CURSOR EMP_CURSOR IS 
		SELECT FIRST_NAME, JOB_ID, HIRE_DATE, SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = 90;
BEGIN 
	OPEN EMP_CURSOR;
	DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('FIRST_NAME',10)||'   '|| RPAD('JOB_ID',8) ||'   '|| LPAD('HIRE_DATE',10)||'   '|| LPAD('SALARY',8) ||'   '|| LPAD('YEARLY SALARY',10));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));

	LOOP
		FETCH EMP_CURSOR INTO V_FN, V_JI, V_HD, V_SAL;
			EXIT WHEN EMP_CURSOR%NOTFOUND;
				DBMS_OUTPUT.PUT_LINE(RPAD(V_FN,10)||'   '|| RPAD(V_JI,8) ||'   '|| LPAD(V_HD,10)||'   '|| LPAD(V_SAL,8) ||'   '|| LPAD(V_SAL*12,10));
				V_TOTALYSAL := V_TOTALYSAL + (V_SAL*12);
				V_TOTALSAL := V_TOTALSAL + V_SAL;
	END LOOP;
	DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('TOTAL SALARY',40) || RPAD(V_TOTALSAL,8) ||LPAD(V_TOTALYSAL,10));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));
	CLOSE EMP_CURSOR;
END;
/


-- DECLARE A CURSOR WHICH WILL DISPLAY FIRST_NAME , SALARY , DEPARTMENT_NAME FOR THOSE WHO WORKS IN DEPARTMENT_ID 20 , 60 AND 90.
-- DISPLAY RESULT WITH PROPER COLUMN HEADINGS AND LINES AS SEPARATOR.

DECLARE 
	V_FN EMPLOYEES.FIRST_NAME%TYPE;
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_DN DEPARTMENTS.DEPARTMENT_NAME%TYPE;

	CURSOR EMP_CURSOR IS
		SELECT FIRST_NAME, SALARY, DEPARTMENT_NAME FROM EMPLOYEES INNER JOIN DEPARTMENTS USING(DEPARTMENT_ID) WHERE DEPARTMENT_ID IN(20,60,90);
BEGIN 
	OPEN EMP_CURSOR;
	DBMS_OUTPUT.PUT_LINE(RPAD('-',35,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('FIRST_NAME',10)||'   '|| LPAD('SALARY',8) ||'   '|| RPAD('DEPARTMENT_NAME',10));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',35,'-'));

	LOOP
		FETCH EMP_CURSOR INTO V_FN,V_SAL,V_DN;
			EXIT WHEN EMP_CURSOR%NOTFOUND;
				DBMS_OUTPUT.PUT_LINE(RPAD(V_FN,10)||'   '|| LPAD(V_SAL,8) ||'   '|| RPAD(V_DN,10));
	END LOOP;
	CLOSE EMP_CURSOR;
END;
/


-- DECLARE A CURSOR WHICH WILL DISPLAY LAST_NAME , HIRE_DATE , DEPARTMENT_NAME , CITY , FOR THOSE WHO WERE HIRED BETWEEN YEARS 92 AND 98.
-- AS SUMMARY DISPLAY HOW MANY EMPLOYEES WERE HIRED DURING 92 TO 98. (DON'T USE COUNT FUNCTION OR ROWCOUNT ATTRIBUTE)

DECLARE 
	V_LN EMPLOYEES.LAST_NAME%TYPE;
	V_HD EMPLOYEES.HIRE_DATE%TYPE;
	V_DN DEPARTMENTS.DEPARTMENT_NAME%TYPE;
	V_C LOCATIONS.CITY%TYPE;
	V_CNT NUMBER := 0;

	CURSOR EMP_CURSOR IS 
		SELECT LAST_NAME, HIRE_DATE, DEPARTMENT_NAME, CITY 
        FROM EMPLOYEES 
        INNER JOIN DEPARTMENTS USING(DEPARTMENT_ID)
		INNER JOIN LOCATIONS USING(LOCATION_ID) WHERE HIRE_DATE BETWEEN '01-JAN-1992' AND '31-DEC-1998';

	BEGIN 
        OPEN EMP_CURSOR;
			DBMS_OUTPUT.PUT_LINE(RPAD('-',50,'-'));
			DBMS_OUTPUT.PUT_LINE(RPAD('LAST_NAME',10)||'   '|| LPAD('HIRE_DATE',10) ||'   '|| RPAD('DEPARTMENT_NAME',10) ||'  '|| RPAD('CITY',10));
			DBMS_OUTPUT.PUT_LINE(RPAD('-',50,'-'));

	LOOP
		FETCH EMP_CURSOR INTO V_LN, V_HD, V_DN, V_C;
			EXIT WHEN EMP_CURSOR%NOTFOUND;
				DBMS_OUTPUT.PUT_LINE(RPAD(V_LN,10)||'   '|| LPAD(V_HD,10) ||'   '|| RPAD(V_DN,10) ||'  '|| RPAD(V_C,10));
				V_CNT := V_CNT + 1;
	END LOOP;
	DBMS_OUTPUT.PUT_LINE(RPAD('-',50,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('TOTAL EMPLOYEES',30) ||'  '|| LPAD(V_CNT,10));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',50,'-'));
	CLOSE EMP_CURSOR;
END;
/


-- DECLARE A CURSOR WHICH WILL DISPLAY FULLNAME , SALARY , CITY , REGION_NAME FOR WHO, WORKS Americas REGION.
-- AS SUMMARY DISPLAY TOTAL SALARY. (DON'T USE SUMMARY FUNCTION)

DECLARE
	V_FN VARCHAR(35);
	V_C LOCATIONS.CITY%TYPE;
	V_SAL EMPLOYEES.SALARY%TYPE;
	V_RN REGIONS.REGION_NAME%TYPE;

	CURSOR EMP_CURSOR IS 
		SELECT FIRST_NAME ||' '|| LAST_NAME "FULL NAME" , SALARY, CITY, REGION_NAME FROM EMPLOYEES
		INNER JOIN DEPARTMENTS USING(DEPARTMENT_ID)
		INNER JOIN LOCATIONS USING(LOCATION_ID)
		INNER JOIN COUNTRIES USING(COUNTRY_ID)
		INNER JOIN REGIONS USING(REGION_ID) WHERE REGION_NAME = 'Americas';
	BEGIN 
		OPEN EMP_CURSOR;
			DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));
			DBMS_OUTPUT.PUT_LINE(RPAD('FULL_NAME',20)||'   '|| LPAD('SALARY',8) ||'   '|| RPAD('CITY',10) ||'  '|| RPAD('REGION_NAME',10));
			DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));

	LOOP
		FETCH EMP_CURSOR INTO V_FN,V_SAL,V_C,V_RN;
			EXIT WHEN EMP_CURSOR%NOTFOUND;
				DBMS_OUTPUT.PUT_LINE(RPAD(V_FN,20)||'   '|| LPAD(V_SAL,8) ||'   '|| RPAD(V_C,10) ||'  '|| RPAD(V_RN,10));
	END LOOP;
	CLOSE EMP_CURSOR;
END;
/



-- DECLARE A CURSOR WHICH WILL DISPLAY FIRST_NAME , JOB_TITLE , SALARY FOR GRADE_LEVEL 'D'. DON'T USE 'ORDER BY'.
-- DISPLAY FIRST_NAME AND SALARY FOR EMPLOYEES WHO GETS EITHER LOWEST OR HIGHEST SALARY FOR 'D' GRADE.
-- DON'T USE SUMMARY FUNCTIONS.

DECLARE 
	-- V_FN EMPLOYEES.FIRST_NAME%TYPE;
	-- V_JT JOBS.JOB_TITLE%TYPE;
	-- V_SAL EMPLOYEES.SALARY%TYPE;
	-- V_GL JOB_GRADES.GRADE_LEVEL%TYPE;
	LOWEST NUMBER;
	HIGHEST NUMBER;
	LOWEST_FN VARCHAR(20);
	HIGHEST_FN VARCHAR(20);

	CURSOR EMP_CURSOR IS 
        
			
        SELECT FIRST_NAME, JOB_TITLE, SALARY, GRADE_LEVEL FROM EMPLOYEES E 
        INNER JOIN JOBS J ON(E.JOB_ID=J.JOB_ID)
        INNER JOIN JOB_GRADES ON(SALARY BETWEEN LOWEST_SAL AND HIGHEST_SAL) WHERE GRADE_LEVEL = 'D';
BEGIN 
    DBMS_OUTPUT.PUT_LINE(RPAD('-',65,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('FIRST_NAME',10) ||'  '|| RPAD('JOB_TITLE',25) ||'  '|| LPAD('SALARY',10) ||'  '|| RPAD('GRADE_LEVEL',15));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',65,'-'));

	FOR ER IN EMP_CURSOR LOOP

		IF EMP_CURSOR%ROWCOUNT = 1 THEN 
        	LOWEST := ER.SALARY;
			HIGHEST := ER.SALARY;
			LOWEST_FN := ER.FIRST_NAME;
			HIGHEST_FN := ER.FIRST_NAME;

		ELSIF ER.SALARY < LOWEST THEN 
            LOWEST := ER.SALARY;
			LOWEST_FN := ER.FIRST_NAME;

		ELSIF ER.SALARY > HIGHEST THEN
            HIGHEST := ER.SALARY;
			HIGHEST_FN := ER.FIRST_NAME;

		END IF;
        
		DBMS_OUTPUT.PUT_LINE(RPAD(ER.FIRST_NAME,10) ||'  '|| RPAD(ER.JOB_TITLE,25) ||'  '|| LPAD(ER.SALARY,10) ||'  '|| RPAD(ER.GRADE_LEVEL,15));
		
	END LOOP;

	DBMS_OUTPUT.PUT_LINE(RPAD('-',65,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('LOWEST SALARY',15) ||'  '||RPAD(LOWEST_FN,10) ||'  '||  LPAD(LOWEST,10));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',65,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('HIGHEST SALARY',15) ||'  '|| RPAD(HIGHEST_FN,10) ||'  '||  LPAD(HIGHEST,10));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',65,'-'));
END;
/
-- ==========================================================================

-- DECLARE A CURSOR WHICH WILL DISPLAY FULL NAME , COUNTRY_NAME , SALARY , CUMULATIVE_SALARY FOR THOSE WHO WORKS IN Seattle.

DECLARE 
    TOTAL_SAL NUMBER := 0;
	CURSOR EMP_CURSOR IS 
		SELECT FIRST_NAME ||' '|| LAST_NAME "FULL_NAME" , COUNTRY_NAME, SALARY, SALARY "CUMULATIVE_SALARY" FROM EMPLOYEES
    		INNER JOIN DEPARTMENTS USING(DEPARTMENT_ID)
    		INNER JOIN LOCATIONS USING(LOCATION_ID) 
    		INNER JOIN COUNTRIES USING(COUNTRY_ID) WHERE CITY = 'Seattle'; 
BEGIN 
	DBMS_OUTPUT.PUT_LINE(RPAD('-',90,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('FULL_NAME',20) ||'  '|| RPAD('COUNTRY_NAME',30) ||'  '|| LPAD('SALARY',10) ||'  '|| LPAD('CUMULATIVE_SALARY',20));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',90,'-'));

	FOR ER IN EMP_CURSOR LOOP
        TOTAL_SAL := TOTAL_SAL + ER.SALARY;
		DBMS_OUTPUT.PUT_LINE(RPAD(ER.FULL_NAME,20) ||'  '|| RPAD(ER.COUNTRY_NAME,30) ||'  '|| LPAD(ER.SALARY,10) ||'  '|| LPAD(TOTAL_SAL,20));
		
        
	END LOOP;
END;
/

-- ==========================================================================

-- DECLARE PARAMETERISED CURSOR. TAKE LOCATION_ID AS PARAMETER.

-- DISPLAY INFO. LIKE BELOW FOR ALL WHO WORKS AT ABOVE SUPPLIED LOCATION_ID.

-- REM FIRST_NAME , JOB_ID , DEPARTMENT_NAME , CITY , STATE_PROVINCE

-- OPEN CURSOR 3 TIMES :

-- REM 1 FOR FIRST TIME SUPPLY LITERAL VALUE 

-- REM 2 FOR SECOND TIME AS VALUE FROM USER AND PASS

-- REM 3 USE DEFAULT VALUE FOR PARAMETER.


DECLARE 
	CURSOR EMP_CURSOR
	(LID NUMBER DEFAULT 1400)
	IS
	SELECT FIRST_NAME , JOB_ID , DEPARTMENT_NAME , CITY , STATE_PROVINCE FROM EMPLOYEES 
    INNER JOIN DEPARTMENTS USING(DEPARTMENT_ID)
    INNER JOIN LOCATIONS USING(LOCATION_ID)
    WHERE LOCATION_ID = LID;

	LOCATIONID NUMBER := 1500;

BEGIN
    DBMS_OUTPUT.PUT_LINE(CHR(10));
    DBMS_OUTPUT.PUT_LINE(RPAD('-',90,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('FIRST_NAME',15) ||'  '|| RPAD('JOB_ID',10) ||'  '|| RPAD('DEPARTMENT_NAME',15) ||'  '|| RPAD('CITY',20) ||'  '|| RPAD('STATE_PROVINCE',15));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',90,'-'));
	

	FOR EMP_RECORD IN EMP_CURSOR(1700) LOOP
		DBMS_OUTPUT.PUT_LINE(RPAD(EMP_RECORD.FIRST_NAME,15) ||'  '|| RPAD(EMP_RECORD.JOB_ID,10) ||'  '|| RPAD(EMP_RECORD.DEPARTMENT_NAME,15)
		||'  '|| RPAD(EMP_RECORD.CITY,20) ||'  '|| RPAD(EMP_RECORD.STATE_PROVINCE,15));
	END LOOP;
	DBMS_OUTPUT.PUT_LINE(RPAD('-',90,'-'));

	-- DBMS_OUTPUT.PUT_LINE(CHR(10));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',90,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('FIRST_NAME',15) ||'  '|| RPAD('JOB_ID',10) ||'  '|| RPAD('DEPARTMENT_NAME',15) ||'  '|| RPAD('CITY',20) ||'  '|| RPAD('STATE_PROVINCE',15));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',90,'-'));

	FOR EMP_RECORD IN EMP_CURSOR(LOCATIONID) LOOP
		DBMS_OUTPUT.PUT_LINE(RPAD(EMP_RECORD.FIRST_NAME,15) ||'  '|| RPAD(EMP_RECORD.JOB_ID,10) ||'  '|| RPAD(EMP_RECORD.DEPARTMENT_NAME,15)
		||'  '|| RPAD(EMP_RECORD.CITY,20) ||'  '|| RPAD(EMP_RECORD.STATE_PROVINCE,15));
	END LOOP;
	DBMS_OUTPUT.PUT_LINE(RPAD('-',90,'-'));

	-- DBMS_OUTPUT.PUT_LINE(CHR(10));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',90,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('FIRST_NAME',15) ||'  '|| RPAD('JOB_ID',10) ||'  '|| RPAD('DEPARTMENT_NAME',15) ||'  '|| RPAD('CITY',20) ||'  '|| RPAD('STATE_PROVINCE',15));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',90,'-'));

	FOR EMP_RECORD IN EMP_CURSOR(1400) LOOP
		DBMS_OUTPUT.PUT_LINE(RPAD(EMP_RECORD.FIRST_NAME,15) ||'  '|| RPAD(EMP_RECORD.JOB_ID,10) ||'  '|| RPAD(EMP_RECORD.DEPARTMENT_NAME,15)
		||'  '|| RPAD(EMP_RECORD.CITY,20) ||'  '|| RPAD(EMP_RECORD.STATE_PROVINCE,15));
	END LOOP;
	DBMS_OUTPUT.PUT_LINE(RPAD('-',90,'-'));
END;
/

-- ==========================================================================

PASS TWO PARAMETER VALUES : 1 LOWER SALARY VALUE 2 HIGHER SALARY VALUE

SET DEFAULT VALUE FOR BOTH PARAMETERS.

OPEN AND USE CURSOR 3 TIMES :

1 DISPLAY FIRST_NAME , SALARY. (DON'T SUPPLY ANY PARAMETER VALUE, USE DEFAULT PARAMETER VALUES)

2 DISPLAY LAST_NAME , SALARY , HIRE_DATE FOR THOSE WHO GETS SALARY IN SUPPLIED RANGE.
  SUPPLY LITERAL VALUES AS ACTUAL PARAMETERS.

3 DISPLAY FULL_NAME , SALARY AND JOB_ID FOR EACH EMPLOYEE WHO GETS SALARY IN SUPPLIED RANGE.
  USE SUBSTITUTION VARAIABLES AS ACTUAL PARAMETERS.


DECLARE
	CURSOR EMP_CURSOR 
	(MIN_SAL NUMBER DEFAULT 2600, MAX_SAL NUMBER DEFAULT 24000)
	IS
	SELECT * FROM EMPLOYEES WHERE SALARY BETWEEN MIN_SAL AND MAX_SAL;

	MIN_SALARY NUMBER := 2600;
	MAX_SALARY NUMBER := 10000;

BEGIN
    DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('FIRST_NAME',15) ||'  '|| LPAD('SALARY',10));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));

	FOR EMP_RECORD IN EMP_CURSOR LOOP
		DBMS_OUTPUT.PUT_LINE(RPAD(EMP_RECORD.FIRST_NAME,15) ||'  '|| LPAD(EMP_RECORD.SALARY,10));
	END LOOP;

	DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('LAST_NAME',15) ||'  '|| LPAD('SALARY',10) ||'  '|| RPAD('HIRE_DATE',10));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));

	FOR EMP_RECORD IN EMP_CURSOR(6000,17000) LOOP
		DBMS_OUTPUT.PUT_LINE(RPAD(EMP_RECORD.LAST_NAME,15) ||'  '|| LPAD(EMP_RECORD.SALARY,10) ||'  '|| RPAD(EMP_RECORD.HIRE_DATE,10));
	END LOOP;

	DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('FULL_NAME',20) ||'  '|| LPAD('SALARY',10) ||'  '|| RPAD('JOB_ID',10));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));

	FOR EMP_RECORD IN EMP_CURSOR(MIN_SALARY, MAX_SALARY) LOOP
		DBMS_OUTPUT.PUT_LINE(RPAD(EMP_RECORD.FIRST_NAME ||' '|| EMP_RECORD.LAST_NAME,20) ||'  '|| LPAD(EMP_RECORD.SALARY,10) ||'  '|| RPAD(EMP_RECORD.JOB_ID,10));
	END LOOP;
END;
/


-- SUPPLY TWO HIRE_DATEs AS PARAMETERS, (USER MAY INPUT DATES IT IN ANY ORDER I.E. LATEST DATE FIRST OR LAST)
-- FILL CURSOR WITH ONLY THOSE EMPLOYEES WHO WERE HIRED INSIDE ABOVE RANGE.
-- DISPLAY FIRST_NAME , LAST_NAME AND HIRE_DATE. (IT SHOULD DISPLAY DATA IN THE TABLE ORDER, DON'T SORT IT.)
-- FIND EMPLOYEE WHO WAS HIRED FIRST IN ABOVE LIST. (DISPLAY FIRST_NAME AND HIRE_DATE)
-- FIND EMPLOYEE WHO WAS HIRED LAST IN ABOVE LIST. (DISPLAY LAST_NAME AND HIRE_DATE)
	
	
DECLARE 
	CURSOR EMP_CURSOR(HIRE_DATE1 DATE DEFAULT '17-JUL-87', HIRE_DATE2 DATE DEFAULT '07-FEB-99')
	IS
	SELECT * FROM EMPLOYEES WHERE HIRE_DATE BETWEEN HIRE_DATE1 AND HIRE_DATE2;

	MIN_DATE EMPLOYEES.HIRE_DATE%TYPE;
	MAX_DATE EMPLOYEES.HIRE_DATE%TYPE;
	MIN_FN EMPLOYEES.FIRST_NAME%TYPE;
	MAX_FN EMPLOYEES.FIRST_NAME%TYPE;

BEGIN 
    
	DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('FIRST_NAME',15) ||'  '|| RPAD('LAST_NAME',15) ||'  '|| RPAD('HIRE_DATE',15));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));

	FOR EMP_RECORD IN EMP_CURSOR LOOP
        DBMS_OUTPUT.PUT_LINE(RPAD(EMP_RECORD.FIRST_NAME,15) ||'  '|| RPAD(EMP_RECORD.LAST_NAME,15) ||'  '|| RPAD(EMP_RECORD.HIRE_DATE,15));
	END LOOP;

	DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('FIRST_NAME',15) ||'  '|| RPAD('HIRE_DATE',15));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));

	FOR EMP_RECORD IN EMP_CURSOR LOOP

		IF EMP_CURSOR%ROWCOUNT = 1 THEN
        	MIN_DATE := EMP_RECORD.HIRE_DATE;
        	MAX_DATE := EMP_RECORD.HIRE_DATE;
			MIN_FN := EMP_RECORD.FIRST_NAME;
			MAX_FN := EMP_RECORD.FIRST_NAME;

		ELSIF EMP_RECORD.HIRE_DATE > MAX_DATE THEN
        		MAX_DATE := EMP_RECORD.HIRE_DATE;
				MAX_FN := EMP_RECORD.FIRST_NAME;


		ELSIF EMP_RECORD.HIRE_DATE < MIN_DATE THEN
        		MIN_DATE := EMP_RECORD.HIRE_DATE;
				MIN_FN := EMP_RECORD.FIRST_NAME;
		END IF;
	END LOOP;
	DBMS_OUTPUT.PUT_LINE(RPAD(MIN_FN,15) ||'  '|| RPAD(MIN_DATE,15));

	DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));
	DBMS_OUTPUT.PUT_LINE(RPAD('FIRST_NAME',15) ||'  '|| RPAD('HIRE_DATE',15));
	DBMS_OUTPUT.PUT_LINE(RPAD('-',60,'-'));

	DBMS_OUTPUT.PUT_LINE(RPAD(MAX_FN,15) ||'  '|| RPAD(MAX_DATE,15));
	
END;
/












