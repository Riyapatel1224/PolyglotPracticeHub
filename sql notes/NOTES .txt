CHAPTER 2

ORDER BY
- ASCENDING ORDER : LOWEST TO HIGHEST
- DESCENDING ORDER : HIGHEST TO LOWEST
- ALPHABETS/CHARACTER ASCENDING : A TO Z , a TO z : A->65 , B -> 66 , Z-> 90 , a->97 , b-> 98 ... z =122
- ALPHABETS/CHARACTER DESCENDING : z TO a , Z TO A : A->65 , B -> 66 , Z-> 90 , a->97 , b-> 98 ... z =122

SELECT SYNTAX : SELECT ... FROM ... WHERE ... ORDER BY ... OFFSET ... FETCH ...;
BY DEFAULT ALL ROWS ARE DISPLAYED IN ASCENDING ORDER OF IT'S ROWID.
SELECT ROWID , EMPLOYEES.* FROM EMPLOYEES;

SELECT * FROM EMPLOYEES ORDER BY COMMISSION_PCT ASC NULLS FIRST;
SELECT * FROM EMPLOYEES ORDER BY COMMISSION_PCT DESC NULLS LAST;

Top n Analysis
1 TO DISPLAY ROWS FROM TOP OF THE TABLE
2 TO DISPLAY ROWS FROM BOTTOM OF THE TABLE
3 TO DISPLAY ROWS FROM THE MIDDLE OF THE TABLE

Syntax : SELECT * FROM table_name FETCH FIRST table_number_to_display ROWS ONLY;
	   SELECT * FROM table_name FETCH NEXT table_number_to_display ROWS ONLY;
FIRST AND NEXT HAS IDENTICAL MEANING AND FUNCTIONALITY.

Syntax: SELECT * FROM table_name OFFSET table_number_to_remove ROWS;
DEFAULT OFFSET VALUE IS 0

TO DISPLAY ROWS FROM THE MIDDLE OF THE TABLE (DISPLAY ROWS BETWEEN 5 AND 11) : OFFSET ... FETCH ...

Syntax : SELECT * FROM table_name OFFSET rows_to_remove ROWS FETCH FIRST/NEXT rows_to_display ROWS ONLY;

RESTRICTION/SELECTION : DISPLAYING SOME OF THE ROWS OF THE TABLE IN RESULT WHICH SATISFIED OUR CONDITIONS/REQUIREMENTS.
FOR RESTRICTION/SELECTION WE WILL USE 'WHERE' CLAUSE.

TYPES OF COMPARISON OPERATORS : 

1 SINGLE ROW/SCALAR 
SINGLE ROW/SCALAR : IT CAN COMPARE SINGLE VALUE WITHIN SINGLE CONDITION
LIST OF SINGLE ROW COMPARISON OPERATORS : = < > <= >=   <> != ^=
Eg: DISPLAY ALL WHO WERE HIRED AFTER YEAR 95
    SELECT * FROM EMPLOYEES WHERE HIRE_DATE > '31-DEC-95' ORDER BY HIRE_DATE;
    
2 MULTI ROW
MULTI ROW : IT CAN COMPARE MULTIPLE VALUES WITHIN SINGLE CONDITION
MULTI ROW COMPARISON OPERATORS : ANY/SOME , ALL

MULTI ROW COMPARISON OPERATORS DON'T WORK ON IT'S OWN.
IT IS ALWAYS USED WITH SINGLE ROW COMPARISON OPERATOR.

SYNTAX : SINGLE ROW COMPARISON OPERATOR MULTI ROW COMPARISON OPERATOR
EXAMPLE : = ANY , = SOME , < ANY , <= ANY , > SOME >= SOME
EXAMPLE : <> ALL , != ALL , ^= ALL
Eg: 

DISPLAY ALL WHO WORKS IN ANY OF THE DEPARTMENT 80 , 90 , 110 , 20
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = ANY (80, 90, 110, 20);
SELECT DEPARTMENT_ID , JOB_ID , FIRST_NAME FROM EMPLOYEES WHERE (DEPARTMENT_ID,JOB_ID) = ANY ((90,'AD_VP'),(50,'ST_CLERK'),(80,'SA_REP'));

DISPLAY ALL OTHER THAN THOSE WHO WORKS IN ANY OF THE DEPARTMENT 80 , 90 , 110 , 20
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID <> ALL (80, 90, 110, 20);
SELECT DEPARTMENT_ID , JOB_ID , FIRST_NAME FROM EMPLOYEES WHERE (DEPARTMENT_ID,JOB_ID) <> ALL ((90,'AD_VP'),(50,'ST_CLERK'),(80,'SA_REP'));

SELECT DEPARTMENT_ID , JOB_ID , FIRST_NAME FROM EMPLOYEES WHERE (DEPARTMENT_ID,JOB_ID) = SOME ((90,'AD_VP'),(50,'ST_CLERK'),(80,'SA_REP'));

DISPLAY ALL BUT : 90 AD_VP 100      50 ST_CLERK 124    20 MK_MAN 100         110 AC_MGR 101
select department_id, job_id, manager_id, first_name from employees where (department_id, job_id, manager_id) <> all ((90, 'AD_VP', 100), (50, 'ST_CLERK', 124), (20,'MK_MAN', 100), (100, 'AC_MGR', 101));



3 SPECIAL
SPECIAL OPERATORS ARE USED FOR SPECIALLY DESIGNED CONDITIONS.
LIST OF SPECIAL OPERATORS : 1 IN 2 BETWEEN 3 LIKE 4 IS NULL

ALL SPECIAL OPERATORS CAN BE USED IN TWO WAYS : 1 POSITIVE 2 NEGATIVE
IN , NOT IN
BETWEEN , NOT BETWEEN
LIKE , NOT LIKE
IS NULL , IS NOT NULL


(1.)IN : TO COMPARE A VALUE WITH LIST OF VALUES.

DEPARTMENT_ID IN 10
DEPARTMENT_ID IN (10,110)
DEPARTMENT_ID IN (10,110,90)
DEPARTMENT_ID NOT IN (10,110,90)
Eg:
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID IN (10,110,90);
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID NOT IN (10,110,90);


(2.)BETWEEN : FOR COMPARING VALUE WITHIN RANGE

SALARY BETWEEN 6000 AND 11000
HIRE_DATE BETWEEN '01-JAN-91' AND '31-DEC-95'
FIRST_NAME BETWEEN 'A' AND 'M'
SALARY NOT BETWEEN 6000 AND 11000
BETWEEN : BETWEEN LOWER VALUE AND HIGHER VALUE
BETWEEN 6000 AND 11000 : CORRECT
BETWEEN 11000 AND 6000 : IT IS LOGICALLY WRONG
BETWEEN : IT RETURNS ROWS INCLUSIVE OF BOTH VALUES.
NOT BETWEEN : IT RETURNS ROWS EXCLUDING BOTH VALUES.
DISPLAY THOSE WHO GETS SALARY IN THE RANGE OF 6000-11000
Eg:
SELECT FIRST_NAME , SALARY FROM EMPLOYEES WHERE SALARY BETWEEN 6000 AND 11000;
SELECT FIRST_NAME , SALARY FROM EMPLOYEES WHERE SALARY NOT BETWEEN 6000 AND 11000 ORDER BY 2;


(3.)LIKE : LIKE IS USED FOR PATTERN MATCHING

LIKE SUPPORTS TWO WILD CARD CHARACTERS : _ %
_ : IS USED FOR SINGLE CHARACTER
% : IS USED FOR ZERO OR MORE CHARACTER
TYPES OF EXAMPLES : 1 USING ONLY WILD CARD CHARACTERS 
			   2 USING OTHER CHARACTERS WITH WILD CARD CHARACTERS
Eg:
DISPLAY THOSE FIRST_NAME WHOSE SECOND AND SECOND LAST ALPHABET IS 'e'
SELECT FIRST_NAME FROM EMPLOYEES WHERE FIRST_NAME LIKE '%e_e%';

(4.)IS NULL : IS USED FOR COMPARING NULL VALUES.


COMPATIBLE DATE FORMATS : DD-mon-RR , DD-MONTH-RR , DD-MON-RRRR , DD/MON/RR , DD/MONTH\RR , DDMONRR



4 LOGICAL OPERATORS :
LIST OF LOGICAL OPERATORS : 1 NOT 2 AND 3 OR

NOT IS PLACED BEFORE CONDITION
AND IS PLACED BETWEEN TWO CONDITION
OR IS PLACED BETWEEN TWO CONDITION







